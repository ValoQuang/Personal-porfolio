{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMe = document.getElementById('Contact Me');\n      if (!contactMe) return;\n      contactMe.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.scrollToHome = () => {\n      let HomeScreen = document.getElementById('Home');\n      if (!HomeScreen) return;\n      HomeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.isElementView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelyVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementView(screenFromDOM, \"complete\");\n        let partialVisible = this.isElementView(screenFromDOM, \"partial\");\n\n        if (fullyVisible || partialVisible) {\n          if (partialVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFading = new Subject();","map":{"version":3,"sources":["C:/Users/quang/Porfolio/porfolio/src/components/utilities/ScrollService.js"],"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","contactMe","document","getElementById","scrollIntoView","behavior","scrollToHome","HomeScreen","isElementView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","Bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","partialVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCaster","screenInView","addEventListener","scrollHandler","currentScreenFading"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAAQC,OAAR,QAAsB,MAAtB;AAEA,eAAe,MAAMC,aAAN,CAAoB;AAK/BC,EAAAA,WAAW,GAAG;AAAA,SAGdC,cAHc,GAGE,MAAI;AAChB,UAAIC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAhB;AACA,UAAI,CAACF,SAAL,EAAgB;AAChBA,MAAAA,SAAS,CAACG,cAAV,CAAyB;AAACC,QAAAA,QAAQ,EAAC;AAAV,OAAzB;AACH,KAPa;;AAAA,SAQdC,YARc,GAQA,MAAI;AACd,UAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;AACA,UAAI,CAACI,UAAL,EAAiB;AACjBA,MAAAA,UAAU,CAACH,cAAX,CAA0B;AAACC,QAAAA,QAAQ,EAAC;AAAV,OAA1B;AACH,KAZa;;AAAA,SAadG,aAbc,GAaE,CAACC,IAAD,EAAMC,IAAN,KAAa;AACzB,UAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV;AACA,UAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;AACA,UAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAxB;AACA,UAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCJ,aAAa,IAAI,CAA3E;AACA,UAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAd,IAAmBE,aAAa,IAAIG,MAAM,CAACC,WAAnE;;AAEA,cAAOT,IAAP;AACI,aAAK,SAAL;AACI,iBAAOO,gBAAP;;AACJ,aAAK,UAAL;AACI,iBAAOG,iBAAP;;AACJ;AAAS,iBAAO,KAAP;AALb;AAOH,KA3Ba;;AAAA,SA4BdC,+BA5Bc,GA4BoBC,KAAD,IAAS;AACtC,UAAG,CAACA,KAAD,IAAUC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,GAA2B,CAAxC,EAA2C;;AAC3C,WAAK,IAAIC,MAAT,IAAmB9B,aAAnB,EAAkC;AAC9B,YAAI+B,aAAa,GAAGzB,QAAQ,CAACC,cAAT,CAAwBuB,MAAM,CAACE,WAA/B,CAApB;AACA,YAAG,CAACD,aAAJ,EAAmB;AAEnB,YAAIE,YAAY,GAAG,KAAKrB,aAAL,CAAmBmB,aAAnB,EAAiC,UAAjC,CAAnB;AACA,YAAIG,cAAc,GAAG,KAAKtB,aAAL,CAAmBmB,aAAnB,EAAiC,SAAjC,CAArB;;AAEA,YAAIE,YAAY,IAAGC,cAAnB,EAAmC;AAC/B,cAAGA,cAAc,IAAI,CAACJ,MAAM,CAACK,eAA7B,EAA8C;AAC1CjC,YAAAA,aAAa,CAACkC,mBAAd,CAAkCC,IAAlC,CAAuC;AACnCC,cAAAA,YAAY,EAAER,MAAM,CAACE;AADc,aAAvC;AAGAF,YAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;AACA;AACH;;AACD,cAAGG,YAAH,EAAiB;AACb/B,YAAAA,aAAa,CAACqC,wBAAd,CAAuCF,IAAvC,CAA4C;AACxCG,cAAAA,YAAY,EAAEV,MAAM,CAACE;AADmB,aAA5C;AAGA;AACH;AACJ;AACJ;AACJ,KArDa;;AACVV,IAAAA,MAAM,CAACmB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKhB,+BAAvC;AACH;;AAP8B;AAAdvB,a,CACVwC,a,GAAgB,IAAIxC,aAAJ,E;AADNA,a,CAEVqC,wB,GAA2B,IAAItC,OAAJ,E;AAFjBC,a,CAGVyC,mB,GAAsB,IAAI1C,OAAJ,E","sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\r\nimport {Subject} from \"rxjs\"\r\n\r\nexport default class ScrollService {\r\n    static scrollHandler = new ScrollService();\r\n    static currentScreenBroadCaster = new Subject();\r\n    static currentScreenFading = new Subject();\r\n\r\n    constructor() {\r\n        window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\r\n    }\r\n    scrollToHireMe =()=>{\r\n        let contactMe = document.getElementById('Contact Me')\r\n        if (!contactMe) return;\r\n        contactMe.scrollIntoView({behavior:\"smooth\"})\r\n    }\r\n    scrollToHome =()=>{\r\n        let HomeScreen = document.getElementById('Home')\r\n        if (!HomeScreen) return;\r\n        HomeScreen.scrollIntoView({behavior:\"smooth\"})\r\n    }\r\n    isElementView = (elem,type)=>{\r\n        let rec = elem.getBoundingClientRect();\r\n        let elementTop = rec.top;\r\n        let elementBottom = rec.Bottom;\r\n        let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\r\n        let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\r\n\r\n        switch(type) {\r\n            case \"partial\":\r\n                return partiallyVisible;\r\n            case \"complete\":\r\n                return completelyVisible;\r\n            default: return false;\r\n        }\r\n    }\r\n    checkCurrentScreenUnderViewport =(event)=>{\r\n        if(!event || object.keys(event).length <1) return;\r\n        for (let screen of TOTAL_SCREENS) {\r\n            let screenFromDOM = document.getElementById(screen.screen_name);\r\n            if(!screenFromDOM) continue;\r\n\r\n            let fullyVisible = this.isElementView(screenFromDOM,\"complete\")\r\n            let partialVisible = this.isElementView(screenFromDOM,\"partial\")\r\n\r\n            if (fullyVisible|| partialVisible) {\r\n                if(partialVisible && !screen.alreadyRendered) {\r\n                    ScrollService.currentScreenFadeIn.next({\r\n                        fadeInScreen: screen.screen_name\r\n                    })\r\n                    screen['alreadyRendered'] = true;\r\n                    break;\r\n                }\r\n                if(fullyVisible) {\r\n                    ScrollService.currentScreenBroadCaster.next({\r\n                        screenInView: screen.screen_name,\r\n                    })\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}